{"version":3,"file":"ng-diff-match-patch.js.map","sources":["ng://ng-diff-match-patch/lib/diffMatchPatch.ts","ng://ng-diff-match-patch/lib/diffMatchPatch.service.ts","ng://ng-diff-match-patch/lib/lineCompare.component.ts","ng://ng-diff-match-patch/lib/diff.directive.ts","ng://ng-diff-match-patch/lib/lineDiff.directive.ts","ng://ng-diff-match-patch/lib/processingDiff.directive.ts","ng://ng-diff-match-patch/lib/semanticDiff.directive.ts","ng://ng-diff-match-patch/lib/diffMatchPatch.module.ts"],"sourcesContent":["export const enum DiffOp {\n  Delete = -1,\n  Equal = 0,\n  Insert = 1\n}\n\nexport type Diff = [DiffOp, string];\n\n/**\n * Class containing the diff, match and patch methods.\n\n */\nclass DiffMatchPatch {\n\n  constructor() {  }\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  Patch_Margin = 4;\n\n  // The number of bits in an int.\n  Match_MaxBits = 32;\n  /**\n   * The data structure representing a diff is an array of tuples:\n   * [[DiffOp.Delete, 'Hello'], [DiffOp.Insert, 'Goodbye'], [DiffOp.Equal, ' world.']]\n   * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n   */\n\n  // Define some regex patterns for matching boundaries.\n  whitespaceRegex_ = new RegExp('/\\s/');\n  linebreakRegex_ = new RegExp('/[\\r\\n]/');\n  blanklineEndRegex_ = new RegExp('/\\n\\r?\\n$/');\n  blanklineStartRegex_ = new RegExp('/^\\r?\\n\\r?\\n/');\n\n  /**\n   * Find the differences between two texts.  Simplifies the problem by stripping\n   * any common prefix or suffix off the texts before diffing.\n   * @param  text1 Old string to be diffed.\n   * @param  text2 New string to be diffed.\n   * @param  opt_checklines Optional speedup flag. If present and false,\n   *     then don't run a line-level diff first to identify the changed areas.\n   *     Defaults to true, which does a faster, slightly less optimal diff.\n   * @param  opt_deadline Optional time when the diff should be complete\n   *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n   *     instead.\n   * @return  Array of diff tuples.\n   */\n    diff_main (text1: string, text2: string, opt_checklines?: boolean, opt_deadline?: number): Array<Diff> {\n      // Set a deadline by which time the diff must be complete.\n      if (typeof opt_deadline == 'undefined') {\n        if (this.Diff_Timeout <= 0) {\n          opt_deadline = Number.MAX_VALUE;\n        } else {\n          opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n        }\n      }\n      const deadline = opt_deadline;\n\n      // Check for null inputs.\n      if (text1 == null || text2 == null) {\n        throw new Error('Null input. (diff_main)');\n      }\n\n      // Check for equality (speedup).\n      if (text1 == text2) {\n        if (text1) {\n          return [[DiffOp.Equal, text1]];\n        }\n        return [];\n      }\n\n      if (typeof opt_checklines == 'undefined') {\n        opt_checklines = true;\n      }\n      const checklines = opt_checklines;\n\n      // Trim off common prefix (speedup).\n      let commonlength = this.diff_commonPrefix(text1, text2);\n      const commonprefix = text1.substring(0, commonlength);\n      text1 = text1.substring(commonlength);\n      text2 = text2.substring(commonlength);\n\n      // Trim off common suffix (speedup).\n      commonlength = this.diff_commonSuffix(text1, text2);\n      const commonsuffix = text1.substring(text1.length - commonlength);\n      text1 = text1.substring(0, text1.length - commonlength);\n      text2 = text2.substring(0, text2.length - commonlength);\n\n      // Compute the diff on the middle block.\n      const diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n      // Restore the prefix and suffix.\n      if (commonprefix) {\n        diffs.unshift([DiffOp.Equal, commonprefix]);\n      }\n      if (commonsuffix) {\n        diffs.push([DiffOp.Equal, commonsuffix]);\n      }\n      this.diff_cleanupMerge(diffs);\n      return diffs;\n  };\n\n\n  /**\n   * Find the differences between two texts.  Assumes that the texts do not\n   * have any common prefix or suffix.\n   * @param  text1 Old string to be diffed.\n   * @param  text2 New string to be diffed.\n   * @param  checklines Speedup flag.  If false, then don't run a\n   *     line-level diff first to identify the changed areas.\n   *     If true, then run a faster, slightly less optimal diff.\n   * @param  deadline Time when the diff should be complete by.\n   * @return  Array of diff tuples.\n\n   */\n    diff_compute_ (text1: string, text2: string, checklines: boolean,\n      deadline: number): Array<Diff> {\n    let diffs: Array<Diff>;\n\n    if (!text1) {\n      // Just add some text (speedup).\n      return [[DiffOp.Insert, text2]];\n    }\n\n    if (!text2) {\n      // Just delete some text (speedup).\n      return [[DiffOp.Delete, text1]];\n    }\n\n    const longtext = text1.length > text2.length ? text1 : text2;\n    const shorttext = text1.length > text2.length ? text2 : text1;\n    const i = longtext.indexOf(shorttext);\n    if (i != -1) {\n      // Shorter text is inside the longer text (speedup).\n      diffs = [[DiffOp.Insert, longtext.substring(0, i)],\n              [DiffOp.Equal, shorttext],\n              [DiffOp.Insert, longtext.substring(i + shorttext.length)]];\n      // Swap insertions for deletions if diff is reversed.\n      if (text1.length > text2.length) {\n        diffs[0][0] = diffs[2][0] = DiffOp.Delete;\n      }\n      return diffs;\n    }\n\n    if (shorttext.length == 1) {\n      // Single character string.\n      // After the previous speedup, the character can't be an equality.\n      return [[DiffOp.Delete, text1], [DiffOp.Insert, text2]];\n    }\n\n    // Check to see if the problem can be split in two.\n    const hm = this.diff_halfMatch_(text1, text2);\n    if (hm) {\n      // A half-match was found, sort out the return data.\n      const text1_a = hm[0];\n      const text1_b = hm[1];\n      const text2_a = hm[2];\n      const text2_b = hm[3];\n      const mid_common = hm[4];\n      // Send both pairs off for separate processing.\n      const diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n      const diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n      // Merge the results.\n      return diffs_a.concat([[DiffOp.Equal, mid_common]], diffs_b);\n    }\n\n    if (checklines && text1.length > 100 && text2.length > 100) {\n      return this.diff_lineMode_(text1, text2, deadline);\n    }\n\n    return this.diff_bisect_(text1, text2, deadline);\n  };\n\n\n  /**\n   * Do a quick line-level diff on both strings, then rediff the parts for\n   * greater accuracy.\n   * This speedup can produce non-minimal diffs.\n   * @param  text1 Old string to be diffed.\n   * @param  text2 New string to be diffed.\n   * @param  deadline Time when the diff should be complete by.\n   * @return  Array of diff tuples.\n\n   */\n    diff_lineMode_ (text1: string, text2: string, deadline: number) {\n    // Scan the text on a line-by-line basis first.\n    const a = this.diff_linesToChars_(text1, text2);\n    text1 = a.chars1;\n    text2 = a.chars2;\n    const linearray = a.lineArray;\n\n    const diffs = this.diff_main(text1, text2, false, deadline);\n\n    // Convert the diff back to original text.\n    this.diff_charsToLines_(diffs, linearray);\n    // Eliminate freak matches (e.g. blank lines)\n    this.diff_cleanupSemantic(diffs);\n\n    // Rediff any replacement blocks, this time character-by-character.\n    // Add a dummy entry at the end.\n    diffs.push([DiffOp.Equal, '']);\n    let pointer = 0;\n    let count_delete = 0;\n    let count_insert = 0;\n    let text_delete = '';\n    let text_insert = '';\n    while (pointer < diffs.length) {\n      switch (diffs[pointer][0]) {\n        case DiffOp.Insert:\n          count_insert++;\n          text_insert += diffs[pointer][1];\n          break;\n        case DiffOp.Delete:\n          count_delete++;\n          text_delete += diffs[pointer][1];\n          break;\n        case DiffOp.Equal:\n          // Upon reaching an equality, check for prior redundancies.\n          if (count_delete >= 1 && count_insert >= 1) {\n            // Delete the offending records and add the merged ones.\n            diffs.splice(pointer - count_delete - count_insert,\n                        count_delete + count_insert);\n            pointer = pointer - count_delete - count_insert;\n            const b = this.diff_main(text_delete, text_insert, false, deadline);\n            for (let j = b.length - 1; j >= 0; j--) {\n              diffs.splice(pointer, 0, b[j]);\n            }\n            pointer = pointer + b.length;\n          }\n          count_insert = 0;\n          count_delete = 0;\n          text_delete = '';\n          text_insert = '';\n          break;\n      }\n      pointer++;\n    }\n    diffs.pop();  // Remove the dummy entry at the end.\n\n    return diffs;\n  };\n\n\n  /**\n   * Find the 'middle snake' of a diff, split the problem in two\n   * and return the recursively constructed diff.\n   * See Myers 1986 paper: An O(ND) Difference Algorithm and Its constiations.\n   * @param  text1 Old string to be diffed.\n   * @param  text2 New string to be diffed.\n   * @param  deadline Time at which to bail if not yet complete.\n   * @return  Array of diff tuples.\n\n   */\n    diff_bisect_ (text1: string, text2: string, deadline: number): Array<Diff> {\n    // Cache the text lengths to prevent multiple calls.\n    const text1_length = text1.length;\n    const text2_length = text2.length;\n    const max_d = Math.ceil((text1_length + text2_length) / 2);\n    const v_offset = max_d;\n    const v_length = 2 * max_d;\n    const v1 = new Array(v_length);\n    const v2 = new Array(v_length);\n    // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n    // integers and undefined.\n    for (let x = 0; x < v_length; x++) {\n      v1[x] = -1;\n      v2[x] = -1;\n    }\n    v1[v_offset + 1] = 0;\n    v2[v_offset + 1] = 0;\n    const delta = text1_length - text2_length;\n    // If the total number of characters is odd, then the front path will collide\n    // with the reverse path.\n    const front = (delta % 2 != 0);\n    // Offsets for start and end of k loop.\n    // Prevents mapping of space beyond the grid.\n    let k1start = 0;\n    let k1end = 0;\n    let k2start = 0;\n    let k2end = 0;\n    for (let d = 0; d < max_d; d++) {\n      // Bail out if deadline is reached.\n      if ((new Date()).getTime() > deadline) {\n        break;\n      }\n\n      // Walk the front path one step.\n      for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n        const k1_offset = v_offset + k1;\n        let x1;\n        if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n          x1 = v1[k1_offset + 1];\n        } else {\n          x1 = v1[k1_offset - 1] + 1;\n        }\n        let y1 = x1 - k1;\n        while (x1 < text1_length && y1 < text2_length &&\n              text1.charAt(x1) == text2.charAt(y1)) {\n          x1++;\n          y1++;\n        }\n        v1[k1_offset] = x1;\n        if (x1 > text1_length) {\n          // Ran off the right of the graph.\n          k1end += 2;\n        } else if (y1 > text2_length) {\n          // Ran off the bottom of the graph.\n          k1start += 2;\n        } else if (front) {\n          const k2_offset = v_offset + delta - k1;\n          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n            // Mirror x2 onto top-left coordinate system.\n            const x2 = text1_length - v2[k2_offset];\n            if (x1 >= x2) {\n              // Overlap detected.\n              return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n            }\n          }\n        }\n      }\n\n      // Walk the reverse path one step.\n      for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n        const k2_offset = v_offset + k2;\n        let x2: number;\n        if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n          x2 = v2[k2_offset + 1];\n        } else {\n          x2 = v2[k2_offset - 1] + 1;\n        }\n        let y2 = x2 - k2;\n        while (x2 < text1_length && y2 < text2_length &&\n              text1.charAt(text1_length - x2 - 1) ==\n              text2.charAt(text2_length - y2 - 1)) {\n          x2++;\n          y2++;\n        }\n        v2[k2_offset] = x2;\n        if (x2 > text1_length) {\n          // Ran off the left of the graph.\n          k2end += 2;\n        } else if (y2 > text2_length) {\n          // Ran off the top of the graph.\n          k2start += 2;\n        } else if (!front) {\n          const k1_offset = v_offset + delta - k2;\n          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n            const x1 = v1[k1_offset];\n            const y1 = v_offset + x1 - k1_offset;\n            // Mirror x2 onto top-left coordinate system.\n            x2 = text1_length - x2;\n            if (x1 >= x2) {\n              // Overlap detected.\n              return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n            }\n          }\n        }\n      }\n    }\n    // Diff took too long and hit the deadline or\n    // number of diffs equals number of characters, no commonality at all.\n    return [[DiffOp.Delete, text1], [DiffOp.Insert, text2]];\n  };\n\n\n  /**\n   * Given the location of the 'middle snake', split the diff in two parts\n   * and recurse.\n   * @param  text1 Old string to be diffed.\n   * @param  text2 New string to be diffed.\n   * @param  x Index of split point in text1.\n   * @param  y Index of split point in text2.\n   * @param  deadline Time at which to bail if not yet complete.\n   * @return  Array of diff tuples.\n\n   */\n    diff_bisectSplit_ (text1: string, text2: string, x: number, y: number, deadline: number) {\n      const text1a = text1.substring(0, x);\n      const text2a = text2.substring(0, y);\n      const text1b = text1.substring(x);\n      const text2b = text2.substring(y);\n\n      // Compute both diffs serially.\n      const diffs = this.diff_main(text1a, text2a, false, deadline);\n      const diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n      return diffs.concat(diffsb);\n    };\n\n\n  /**\n   * Split two texts into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * @param  text1 First string.\n   * @param  text2 Second string.\n   * @return }\n   *     An object containing the encoded text1, the encoded text2 and\n   *     the array of unique strings.\n   *     The zeroth element of the array of unique strings is intentionally blank.\n\n   */\n    diff_linesToChars_ (text1: string, text2: string) {\n      const lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n      const lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n      // '\\x00' is a valid character, but constious debuggers don't like it.\n      // So we'll insert a junk entry to avoid generating a null character.\n      lineArray[0] = '';\n\n\n      const chars1 = this.diff_linesToCharsMunge_(text1, lineArray, lineHash);\n      const chars2 = this.diff_linesToCharsMunge_(text2, lineArray, lineHash);\n      return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n   };\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param  text String to encode.\n   * @return  Encoded string.\n\n   */\n  diff_linesToCharsMunge_(text: string, lineArray: Array<string>, lineHash: any): string {\n    let chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    let lineStart = 0;\n    let lineEnd = -1;\n    // Keeping our own length constiable is faster than looking it up.\n    let lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      const line = text.substring(lineStart, lineEnd + 1);\n      lineStart = lineEnd + 1;\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n    }\n    return chars;\n  }\n\n  /**\n   * Rehydrate the text in a diff from a string of line hashes to real lines of\n   * text.\n   * @param  diffs Array of diff tuples.\n   * @param  lineArray Array of unique strings.\n\n   */\n    diff_charsToLines_ (diffs: Array<Diff>, lineArray: Array<string>): void {\n    for (let x = 0; x < diffs.length; x++) {\n      const chars = diffs[x][1];\n      const text = [];\n      for (let y = 0; y < chars.length; y++) {\n        text[y] = lineArray[chars.charCodeAt(y)];\n      }\n      diffs[x][1] = text.join('');\n    }\n  };\n\n\n  /**\n   * Determine the common prefix of two strings.\n   * @param  text1 First string.\n   * @param  text2 Second string.\n   * @return  The number of characters common to the start of each\n   *     string.\n   */\n    diff_commonPrefix (text1: string, text2: string): number {\n    // Quick check for common null cases.\n    if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n      return 0;\n    }\n    // Binary search.\n    // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n    let pointermin = 0;\n    let pointermax = Math.min(text1.length, text2.length);\n    let pointermid = pointermax;\n    let pointerstart = 0;\n    while (pointermin < pointermid) {\n      if (text1.substring(pointerstart, pointermid) ==\n          text2.substring(pointerstart, pointermid)) {\n        pointermin = pointermid;\n        pointerstart = pointermin;\n      } else {\n        pointermax = pointermid;\n      }\n      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n    }\n    return pointermid;\n  };\n\n\n  /**\n   * Determine the common suffix of two strings.\n   * @param  text1 First string.\n   * @param  text2 Second string.\n   * @return  The number of characters common to the end of each string.\n   */\n    diff_commonSuffix (text1: string, text2: string): number {\n    // Quick check for common null cases.\n    if (!text1 || !text2 ||\n        text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n      return 0;\n    }\n    // Binary search.\n    // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n    let pointermin = 0;\n    let pointermax = Math.min(text1.length, text2.length);\n    let pointermid = pointermax;\n    let pointerend = 0;\n    while (pointermin < pointermid) {\n      if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n          text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n        pointermin = pointermid;\n        pointerend = pointermin;\n      } else {\n        pointermax = pointermid;\n      }\n      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n    }\n    return pointermid;\n  };\n\n\n  /**\n   * Determine if the suffix of one string is the prefix of another.\n   * @param  text1 First string.\n   * @param  text2 Second string.\n   * @return  The number of characters common to the end of the first\n   *     string and the start of the second string.\n\n   */\n    diff_commonOverlap_ (text1: string, text2: string): number {\n    // Cache the text lengths to prevent multiple calls.\n    const text1_length = text1.length;\n    const text2_length = text2.length;\n    // Eliminate the null case.\n    if (text1_length == 0 || text2_length == 0) {\n      return 0;\n    }\n    // Truncate the longer string.\n    if (text1_length > text2_length) {\n      text1 = text1.substring(text1_length - text2_length);\n    } else if (text1_length < text2_length) {\n      text2 = text2.substring(0, text1_length);\n    }\n    const text_length = Math.min(text1_length, text2_length);\n    // Quick check for the worst case.\n    if (text1 == text2) {\n      return text_length;\n    }\n\n    // Start by looking for a single character match\n    // and increase length until no match is found.\n    // Performance analysis: http://neil.fraser.name/news/2010/11/04/\n    let best = 0;\n    let length = 1;\n    while (true) {\n      const pattern = text1.substring(text_length - length);\n      const found = text2.indexOf(pattern);\n      if (found == -1) {\n        return best;\n      }\n      length += found;\n      if (found == 0 || text1.substring(text_length - length) ==\n          text2.substring(0, length)) {\n        best = length;\n        length++;\n      }\n    }\n  };\n\n\n  /**\n   * Do the two texts share a substring which is at least half the length of the\n   * longer text?\n   * This speedup can produce non-minimal diffs.\n   * @param  text1 First string.\n   * @param  text2 Second string.\n   * @return  Five element Array, containing the prefix of\n   *     text1, the suffix of text1, the prefix of text2, the suffix of\n   *     text2 and the common middle.  Or null if there was no match.\n\n   */\n    diff_halfMatch_ (text1: string, text2: string) {\n    if (this.Diff_Timeout <= 0) {\n      // Don't risk returning a non-optimal diff if we have unlimited time.\n      return null;\n    }\n    const longtext = text1.length > text2.length ? text1 : text2;\n    const shorttext = text1.length > text2.length ? text2 : text1;\n    if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n      return null;  // Pointless.\n    }\n    const dmp = this;  // 'this' becomes 'window' in a closure.\n\n\n    // First check if the second quarter is the seed for a half-match.\n    const hm1 = this.diff_halfMatchI_(longtext, shorttext,\n                              Math.ceil(longtext.length / 4), dmp);\n    // Check again based on the third quarter.\n    const hm2 = this.diff_halfMatchI_(longtext, shorttext,\n                              Math.ceil(longtext.length / 2), dmp);\n    let hm;\n    if (!hm1 && !hm2) {\n      return null;\n    } else if (!hm2) {\n      hm = hm1;\n    } else if (!hm1) {\n      hm = hm2;\n    } else {\n      // Both matched.  Select the longest.\n      hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n    }\n\n    // A half-match was found, sort out the return data.\n    let text1_a, text1_b, text2_a, text2_b;\n    if (text1.length > text2.length) {\n      text1_a = hm[0];\n      text1_b = hm[1];\n      text2_a = hm[2];\n      text2_b = hm[3];\n    } else {\n      text2_a = hm[0];\n      text2_b = hm[1];\n      text1_a = hm[2];\n      text1_b = hm[3];\n    }\n    const mid_common = hm[4];\n    return [text1_a, text1_b, text2_a, text2_b, mid_common];\n  };\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external constiables.\n   * @param  longtext Longer string.\n   * @param  shorttext Shorter string.\n   * @param  i Start index of quarter length substring within longtext.\n   * @return  Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n\n   */\n  diff_halfMatchI_(longtext: string, shorttext: string, i: number, dmp: DiffMatchPatch): Array<string> {\n    // Start with a 1/4 length substring at position i as a seed.\n    const seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    let j = -1;\n    let best_common = '';\n    let best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      const prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                              shorttext.substring(j));\n      const suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                              shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Reduce the number of edits by eliminating semantically trivial equalities.\n   * @param  diffs Array of diff tuples.\n   */\n    diff_cleanupSemantic (diffs: Array<Diff>) {\n    let changes = false;\n    const equalities = [];  // Stack of indices where equalities are found.\n    let equalitiesLength = 0;  // Keeping our own length const is faster in JS.\n\n    let lastequality = null;\n    // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n    let pointer = 0;  // Index of current position.\n    // Number of characters that changed prior to the equality.\n    let length_insertions1 = 0;\n    let length_deletions1 = 0;\n    // Number of characters that changed after the equality.\n    let length_insertions2 = 0;\n    let length_deletions2 = 0;\n    while (pointer < diffs.length) {\n      if (diffs[pointer][0] == DiffOp.Equal) {  // Equality found.\n        equalities[equalitiesLength++] = pointer;\n        length_insertions1 = length_insertions2;\n        length_deletions1 = length_deletions2;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastequality = diffs[pointer][1];\n      } else {  // An insertion or deletion.\n        if (diffs[pointer][0] == DiffOp.Insert) {\n          length_insertions2 += diffs[pointer][1].length;\n        } else {\n          length_deletions2 += diffs[pointer][1].length;\n        }\n        // Eliminate an equality that is smaller or equal to the edits on both\n        // sides of it.\n        if (lastequality && (lastequality.length <=\n            Math.max(length_insertions1, length_deletions1)) &&\n            (lastequality.length <= Math.max(length_insertions2,\n                                            length_deletions2))) {\n          // Duplicate record.\n          diffs.splice(equalities[equalitiesLength - 1], 0,\n                      [DiffOp.Delete, lastequality]);\n          // Change second copy to insert.\n          diffs[equalities[equalitiesLength - 1] + 1][0] = DiffOp.Insert;\n          // Throw away the equality we just deleted.\n          equalitiesLength--;\n          // Throw away the previous equality (it needs to be reevaluated).\n          equalitiesLength--;\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          length_insertions1 = 0;  // Reset the counters.\n          length_deletions1 = 0;\n          length_insertions2 = 0;\n          length_deletions2 = 0;\n          lastequality = null;\n          changes = true;\n        }\n      }\n      pointer++;\n    }\n\n    // Normalize the diff.\n    if (changes) {\n      this.diff_cleanupMerge(diffs);\n    }\n    this.diff_cleanupSemanticLossless(diffs);\n\n    // Find any overlaps between deletions and insertions.\n    // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n    //   -> <del>abc</del>xxx<ins>def</ins>\n    // e.g: <del>xxxabc</del><ins>defxxx</ins>\n    //   -> <ins>def</ins>xxx<del>abc</del>\n    // Only extract an overlap if it is as big as the edit ahead or behind it.\n    pointer = 1;\n    while (pointer < diffs.length) {\n      if (diffs[pointer - 1][0] == DiffOp.Delete &&\n          diffs[pointer][0] == DiffOp.Insert) {\n        const deletion = diffs[pointer - 1][1];\n        const insertion = diffs[pointer][1];\n        const overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n        const overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n        if (overlap_length1 >= overlap_length2) {\n          if (overlap_length1 >= deletion.length / 2 ||\n              overlap_length1 >= insertion.length / 2) {\n            // Overlap found.  Insert an equality and trim the surrounding edits.\n            diffs.splice(pointer, 0,\n                [DiffOp.Equal, insertion.substring(0, overlap_length1)]);\n            diffs[pointer - 1][1] =\n                deletion.substring(0, deletion.length - overlap_length1);\n            diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n            pointer++;\n          }\n        } else {\n          if (overlap_length2 >= deletion.length / 2 ||\n              overlap_length2 >= insertion.length / 2) {\n            // Reverse overlap found.\n            // Insert an equality and swap and trim the surrounding edits.\n            diffs.splice(pointer, 0,\n                [DiffOp.Equal, deletion.substring(0, overlap_length2)]);\n            diffs[pointer - 1][0] = DiffOp.Insert;\n            diffs[pointer - 1][1] =\n                insertion.substring(0, insertion.length - overlap_length2);\n            diffs[pointer + 1][0] = DiffOp.Delete;\n            diffs[pointer + 1][1] =\n                deletion.substring(overlap_length2);\n            pointer++;\n          }\n        }\n        pointer++;\n      }\n      pointer++;\n    }\n  };\n\n\n  /**\n   * Look for single edits surrounded on both sides by equalities\n   * which can be shifted sideways to align the edit to a word boundary.\n   * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n   * @param  diffs Array of diff tuples.\n   */\n    diff_cleanupSemanticLossless (diffs: Array<Diff>) {\n    /**\n     * Given two strings, compute a score representing whether the internal\n     * boundary falls on logical boundaries.\n     * Scores range from 6 (best) to 0 (worst).\n     * Closure, but does not reference any external constiables.\n     * @param  one First string.\n     * @param  two Second string.\n     * @return  The score.\n\n     */\n    function diff_cleanupSemanticScore_(one: string, two: string): number {\n      if (!one || !two) {\n        // Edges are the best.\n        return 6;\n      }\n\n\n      const nonAlphaNumericRegex_ = new RegExp('/[^a-zA-Z0-9]/');\n\n      // Each port of this function behaves slightly differently due to\n      // subtle differences in each language's definition of things like\n      // 'whitespace'.  Since this function's purpose is largely cosmetic,\n      // the choice has been made to use each language's native features\n      // rather than force total conformity.\n      const char1 = one.charAt(one.length - 1);\n      const char2 = two.charAt(0);\n      const nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex_);\n      const nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex_);\n      const whitespace1 = nonAlphaNumeric1 &&\n          char1.match(this.whitespaceRegex_);\n      const whitespace2 = nonAlphaNumeric2 &&\n          char2.match(this.whitespaceRegex_);\n      const lineBreak1 = whitespace1 &&\n          char1.match(this.linebreakRegex_);\n      const lineBreak2 = whitespace2 &&\n          char2.match(this.linebreakRegex_);\n      const blankLine1 = lineBreak1 &&\n          one.match(this.blanklineEndRegex_);\n      const blankLine2 = lineBreak2 &&\n          two.match(this.blanklineStartRegex_);\n\n      if (blankLine1 || blankLine2) {\n        // Five points for blank lines.\n        return 5;\n      } else if (lineBreak1 || lineBreak2) {\n        // Four points for line breaks.\n        return 4;\n      } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n        // Three points for end of sentences.\n        return 3;\n      } else if (whitespace1 || whitespace2) {\n        // Two points for whitespace.\n        return 2;\n      } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n        // One point for non-alphanumeric.\n        return 1;\n      }\n      return 0;\n    }\n\n    let pointer = 1;\n    // Intentionally ignore the first and last element (don't need checking).\n    while (pointer < diffs.length - 1) {\n      if (diffs[pointer - 1][0] == DiffOp.Equal &&\n          diffs[pointer + 1][0] == DiffOp.Equal) {\n        // This is a single edit surrounded by equalities.\n        let equality1 = diffs[pointer - 1][1];\n        let edit = diffs[pointer][1];\n        let equality2 = diffs[pointer + 1][1];\n\n        // First, shift the edit as far left as possible.\n        const commonOffset = this.diff_commonSuffix(equality1, edit);\n        if (commonOffset) {\n          const commonString = edit.substring(edit.length - commonOffset);\n          equality1 = equality1.substring(0, equality1.length - commonOffset);\n          edit = commonString + edit.substring(0, edit.length - commonOffset);\n          equality2 = commonString + equality2;\n        }\n\n        // Second, step character by character right, looking for the best fit.\n        let bestEquality1 = equality1;\n        let bestEdit = edit;\n        let bestEquality2 = equality2;\n        let bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        while (edit.charAt(0) === equality2.charAt(0)) {\n          equality1 += edit.charAt(0);\n          edit = edit.substring(1) + equality2.charAt(0);\n          equality2 = equality2.substring(1);\n          const score = diff_cleanupSemanticScore_(equality1, edit) +\n              diff_cleanupSemanticScore_(edit, equality2);\n          // The >= encourages trailing rather than leading whitespace on edits.\n          if (score >= bestScore) {\n            bestScore = score;\n            bestEquality1 = equality1;\n            bestEdit = edit;\n            bestEquality2 = equality2;\n          }\n        }\n\n        if (diffs[pointer - 1][1] != bestEquality1) {\n          // We have an improvement, save it back to the diff.\n          if (bestEquality1) {\n            diffs[pointer - 1][1] = bestEquality1;\n          } else {\n            diffs.splice(pointer - 1, 1);\n            pointer--;\n          }\n          diffs[pointer][1] = bestEdit;\n          if (bestEquality2) {\n            diffs[pointer + 1][1] = bestEquality2;\n          } else {\n            diffs.splice(pointer + 1, 1);\n            pointer--;\n          }\n        }\n      }\n      pointer++;\n    }\n  };\n\n\n  /**\n   * Reduce the number of edits by eliminating operationally trivial equalities.\n   * @param  diffs Array of diff tuples.\n   */\n    diff_cleanupEfficiency (diffs: Array<Diff>) {\n    let changes = false;\n    const equalities = [];  // Stack of indices where equalities are found.\n    let equalitiesLength = 0;  // Keeping our own length const is faster in JS.\n\n    let lastequality = null;\n    // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n    let pointer = 0;  // Index of current position.\n    // Is there an insertion operation before the last equality.\n    let pre_ins = false;\n    // Is there a deletion operation before the last equality.\n    let pre_del = false;\n    // Is there an insertion operation after the last equality.\n    let post_ins = false;\n    // Is there a deletion operation after the last equality.\n    let post_del = false;\n    while (pointer < diffs.length) {\n      if (diffs[pointer][0] == DiffOp.Equal) {  // Equality found.\n        if (diffs[pointer][1].length < this.Diff_EditCost &&\n            (post_ins || post_del)) {\n          // Candidate found.\n          equalities[equalitiesLength++] = pointer;\n          pre_ins = post_ins;\n          pre_del = post_del;\n          lastequality = diffs[pointer][1];\n        } else {\n          // Not a candidate, and can never become one.\n          equalitiesLength = 0;\n          lastequality = null;\n        }\n        post_ins = post_del = false;\n      } else {  // An insertion or deletion.\n        if (diffs[pointer][0] == DiffOp.Delete) {\n          post_del = true;\n        } else {\n          post_ins = true;\n        }\n        /*\n        * Five types to be split:\n        * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n        * <ins>A</ins>X<ins>C</ins><del>D</del>\n        * <ins>A</ins><del>B</del>X<ins>C</ins>\n        * <ins>A</del>X<ins>C</ins><del>D</del>\n        * <ins>A</ins><del>B</del>X<del>C</del>\n        */\n        if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||\n                            ((lastequality.length < this.Diff_EditCost / 2) &&\n                            ((pre_ins?1:0) + (pre_del?1:0) + (post_ins?1:0) + (post_del?1:0) == 3)))) {\n          // Duplicate record.\n          diffs.splice(equalities[equalitiesLength - 1], 0,\n                      [DiffOp.Delete, lastequality]);\n          // Change second copy to insert.\n          diffs[equalities[equalitiesLength - 1] + 1][0] = DiffOp.Insert;\n          equalitiesLength--;  // Throw away the equality we just deleted;\n          lastequality = null;\n          if (pre_ins && pre_del) {\n            // No changes made which could affect previous entry, keep going.\n            post_ins = post_del = true;\n            equalitiesLength = 0;\n          } else {\n            equalitiesLength--;  // Throw away the previous equality.\n            pointer = equalitiesLength > 0 ?\n                equalities[equalitiesLength - 1] : -1;\n            post_ins = post_del = false;\n          }\n          changes = true;\n        }\n      }\n      pointer++;\n    }\n\n    if (changes) {\n      this.diff_cleanupMerge(diffs);\n    }\n  };\n\n\n  /**\n   * Reorder and merge like edit sections.  Merge equalities.\n   * Any edit section can move as long as it doesn't cross an equality.\n   * @param  diffs Array of diff tuples.\n   */\n    diff_cleanupMerge (diffs: Array<Diff>) {\n    diffs.push([DiffOp.Equal, '']);  // Add a dummy entry at the end.\n    let pointer = 0;\n    let count_delete = 0;\n    let count_insert = 0;\n    let text_delete = '';\n    let text_insert = '';\n    let commonlength;\n    while (pointer < diffs.length) {\n      switch (diffs[pointer][0]) {\n        case DiffOp.Insert:\n          count_insert++;\n          text_insert += diffs[pointer][1];\n          pointer++;\n          break;\n        case DiffOp.Delete:\n          count_delete++;\n          text_delete += diffs[pointer][1];\n          pointer++;\n          break;\n        case DiffOp.Equal:\n          // Upon reaching an equality, check for prior redundancies.\n          if (count_delete + count_insert > 1) {\n            if (count_delete !== 0 && count_insert !== 0) {\n              // Factor out any common prefixies.\n              commonlength = this.diff_commonPrefix(text_insert, text_delete);\n              if (commonlength !== 0) {\n                if ((pointer - count_delete - count_insert) > 0 &&\n                    diffs[pointer - count_delete - count_insert - 1][0] ==\n                    DiffOp.Equal) {\n                  diffs[pointer - count_delete - count_insert - 1][1] +=\n                      text_insert.substring(0, commonlength);\n                } else {\n                  diffs.splice(0, 0, [DiffOp.Equal,\n                                      text_insert.substring(0, commonlength)]);\n                  pointer++;\n                }\n                text_insert = text_insert.substring(commonlength);\n                text_delete = text_delete.substring(commonlength);\n              }\n              // Factor out any common suffixies.\n              commonlength = this.diff_commonSuffix(text_insert, text_delete);\n              if (commonlength !== 0) {\n                diffs[pointer][1] = text_insert.substring(text_insert.length -\n                    commonlength) + diffs[pointer][1];\n                text_insert = text_insert.substring(0, text_insert.length -\n                    commonlength);\n                text_delete = text_delete.substring(0, text_delete.length -\n                    commonlength);\n              }\n            }\n            // Delete the offending records and add the merged ones.\n            if (count_delete === 0) {\n              diffs.splice(pointer - count_insert,\n                  count_delete + count_insert, [DiffOp.Insert, text_insert]);\n            } else if (count_insert === 0) {\n              diffs.splice(pointer - count_delete,\n                  count_delete + count_insert, [DiffOp.Delete, text_delete]);\n            } else {\n              diffs.splice(pointer - count_delete - count_insert,\n                  count_delete + count_insert, [DiffOp.Delete, text_delete],\n                  [DiffOp.Insert, text_insert]);\n            }\n            pointer = pointer - count_delete - count_insert +\n                      (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n          } else if (pointer !== 0 && diffs[pointer - 1][0] == DiffOp.Equal) {\n            // Merge this equality with the previous one.\n            diffs[pointer - 1][1] += diffs[pointer][1];\n            diffs.splice(pointer, 1);\n          } else {\n            pointer++;\n          }\n          count_insert = 0;\n          count_delete = 0;\n          text_delete = '';\n          text_insert = '';\n          break;\n      }\n    }\n    if (diffs[diffs.length - 1][1] === '') {\n      diffs.pop();  // Remove the dummy entry at the end.\n    }\n\n    // Second pass: look for single edits surrounded on both sides by equalities\n    // which can be shifted sideways to eliminate an equality.\n    // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n    let changes = false;\n    pointer = 1;\n    // Intentionally ignore the first and last element (don't need checking).\n    while (pointer < diffs.length - 1) {\n      if (diffs[pointer - 1][0] == DiffOp.Equal &&\n          diffs[pointer + 1][0] == DiffOp.Equal) {\n        // This is a single edit surrounded by equalities.\n        if (diffs[pointer][1].substring(diffs[pointer][1].length -\n            diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n          // Shift the edit over the previous equality.\n          diffs[pointer][1] = diffs[pointer - 1][1] +\n              diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                          diffs[pointer - 1][1].length);\n          diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n          diffs.splice(pointer - 1, 1);\n          changes = true;\n        } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n            diffs[pointer + 1][1]) {\n          // Shift the edit over the next equality.\n          diffs[pointer - 1][1] += diffs[pointer + 1][1];\n          diffs[pointer][1] =\n              diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n              diffs[pointer + 1][1];\n          diffs.splice(pointer + 1, 1);\n          changes = true;\n        }\n      }\n      pointer++;\n    }\n    // If shifts were made, the diff needs reordering and another shift sweep.\n    if (changes) {\n      this.diff_cleanupMerge(diffs);\n    }\n  };\n\n\n  /**\n   * loc is a location in text1, compute and return the equivalent location in\n   * text2.\n   * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n   * @param  diffs Array of diff tuples.\n   * @param  loc Location within text1.\n   * @return  Location within text2.\n   */\n    diff_xIndex (diffs: Array<Diff>, loc: number): number {\n    let chars1 = 0;\n    let chars2 = 0;\n    let last_chars1 = 0;\n    let last_chars2 = 0;\n    let x;\n    for (x = 0; x < diffs.length; x++) {\n      if (diffs[x][0] !== DiffOp.Insert) {  // Equality or deletion.\n        chars1 += diffs[x][1].length;\n      }\n      if (diffs[x][0] !== DiffOp.Delete) {  // Equality or insertion.\n        chars2 += diffs[x][1].length;\n      }\n      if (chars1 > loc) {  // Overshot the location.\n        break;\n      }\n      last_chars1 = chars1;\n      last_chars2 = chars2;\n    }\n    // Was the location was deleted?\n    if (diffs.length != x && diffs[x][0] === DiffOp.Delete) {\n      return last_chars2;\n    }\n    // Add the remaining character length.\n    return last_chars2 + (loc - last_chars1);\n  };\n\n\n  /**\n   * Convert a diff array into a pretty HTML report.\n   * @param  diffs Array of diff tuples.\n   * @return  HTML representation.\n   */\n    diff_prettyHtml = function(diffs: Array<Diff>): string {\n    const html = [];\n    const pattern_amp = /&/g;\n    const pattern_lt = /</g;\n    const pattern_gt = />/g;\n    const pattern_para = /\\n/g;\n    for (let x = 0; x < diffs.length; x++) {\n      const op = diffs[x][0];    // Operation (insert, delete, equal)\n      const data = diffs[x][1];  // Text of change.\n      const text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n          .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n      switch (op) {\n        case DiffOp.Insert:\n          html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n          break;\n        case DiffOp.Delete:\n          html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n          break;\n        case DiffOp.Equal:\n          html[x] = '<span>' + text + '</span>';\n          break;\n      }\n    }\n    return html.join('');\n  };\n\n\n  /**\n   * Compute and return the source text (all equalities and deletions).\n   * @param  diffs Array of diff tuples.\n   * @return  Source text.\n   */\n    diff_text1 (diffs: Array<Diff>): string {\n    const text = [];\n    for (let x = 0; x < diffs.length; x++) {\n      if (diffs[x][0] !== DiffOp.Insert) {\n        text[x] = diffs[x][1];\n      }\n    }\n    return text.join('');\n  };\n\n\n  /**\n   * Compute and return the destination text (all equalities and insertions).\n   * @param  diffs Array of diff tuples.\n   * @return  Destination text.\n   */\n    diff_text2 (diffs: Array<Diff>): string {\n    const text = [];\n    for (let x = 0; x < diffs.length; x++) {\n      if (diffs[x][0] !== DiffOp.Delete) {\n        text[x] = diffs[x][1];\n      }\n    }\n    return text.join('');\n  };\n\n\n  /**\n   * Compute the Levenshtein distance; the number of inserted, deleted or\n   * substituted characters.\n   * @param  diffs Array of diff tuples.\n   * @return  Number of changes.\n   */\n    diff_levenshtein (diffs: Array<Diff>): number {\n    let levenshtein = 0;\n    let insertions = 0;\n    let deletions = 0;\n    for (let x = 0; x < diffs.length; x++) {\n      const op = diffs[x][0];\n      const data = diffs[x][1];\n      switch (op) {\n        case DiffOp.Insert:\n          insertions += data.length;\n          break;\n        case DiffOp.Delete:\n          deletions += data.length;\n          break;\n        case DiffOp.Equal:\n          // A deletion and an insertion is one substitution.\n          levenshtein += Math.max(insertions, deletions);\n          insertions = 0;\n          deletions = 0;\n          break;\n      }\n    }\n    levenshtein += Math.max(insertions, deletions);\n    return levenshtein;\n  };\n\n\n  /**\n   * Crush the diff into an encoded string which describes the operations\n   * required to transform text1 into text2.\n   * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n   * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n   * @param  diffs Array of diff tuples.\n   * @return  Delta text.\n   */\n    diff_toDelta (diffs: Array<Diff>): string {\n    const text = [];\n    for (let x = 0; x < diffs.length; x++) {\n      switch (diffs[x][0]) {\n        case DiffOp.Insert:\n          text[x] = '+' + encodeURI(diffs[x][1]);\n          break;\n        case DiffOp.Delete:\n          text[x] = '-' + diffs[x][1].length;\n          break;\n        case DiffOp.Equal:\n          text[x] = '=' + diffs[x][1].length;\n          break;\n      }\n    }\n    return text.join('\\t').replace(/%20/g, ' ');\n  };\n\n\n  /**\n   * Given the original text1, and an encoded string which describes the\n   * operations required to transform text1 into text2, compute the full diff.\n   * @param  text1 Source string for the diff.\n   * @param  delta Delta text.\n   * @return  Array of diff tuples.\n   * @throws {!Error} If invalid input.\n   */\n    diff_fromDelta (text1: string, delta: string) {\n    const diffs = [];\n    let diffsLength = 0;  // Keeping our own length const is faster in JS.\n    let pointer = 0;  // Cursor in text1\n    const tokens = delta.split(/\\t/g);\n    for (let x = 0; x < tokens.length; x++) {\n      // Each token begins with a one character parameter which specifies the\n      // operation of this token (delete, insert, equality).\n      const param = tokens[x].substring(1);\n      switch (tokens[x].charAt(0)) {\n        case '+':\n          try {\n            diffs[diffsLength++] = [DiffOp.Insert, decodeURI(param)];\n          } catch (ex) {\n            // Malformed URI sequence.\n            throw new Error('Illegal escape in diff_fromDelta: ' + param);\n          }\n          break;\n        case '-':\n          // Fall through.\n        case '=':\n          const n = parseInt(param, 10);\n          if (isNaN(n) || n < 0) {\n            throw new Error('Invalid number in diff_fromDelta: ' + param);\n          }\n          const text = text1.substring(pointer, pointer += n);\n          if (tokens[x].charAt(0) == '=') {\n            diffs[diffsLength++] = [DiffOp.Equal, text];\n          } else {\n            diffs[diffsLength++] = [DiffOp.Delete, text];\n          }\n          break;\n        default:\n          // Blank tokens are ok (from a trailing \\t).\n          // Anything else is an error.\n          if (tokens[x]) {\n            throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                            tokens[x]);\n          }\n      }\n    }\n    if (pointer != text1.length) {\n      throw new Error('Delta length (' + pointer +\n          ') does not equal source text length (' + text1.length + ').');\n    }\n    return diffs;\n  };\n\n  /**\n   * Locate the best instance of 'pattern' in 'text' near 'loc'.\n   * @param  text The text to search.\n   * @param  pattern The pattern to search for.\n   * @param  loc The location to search around.\n   * @return  Best match index or -1.\n   */\n    match_main (text: string, pattern: string, loc: number): number {\n    // Check for null inputs.\n    if (text == null || pattern == null || loc == null) {\n      throw new Error('Null input. (match_main)');\n    }\n\n    loc = Math.max(0, Math.min(loc, text.length));\n    if (text == pattern) {\n      // Shortcut (potentially not guaranteed by the algorithm)\n      return 0;\n    } else if (!text.length) {\n      // Nothing to match.\n      return -1;\n    } else if (text.substring(loc, loc + pattern.length) == pattern) {\n      // Perfect match at the perfect spot!  (Includes case of null pattern)\n      return loc;\n    } else {\n      // Do a fuzzy compare.\n      return this.match_bitap_(text, pattern, loc);\n    }\n  };\n\n\n  /**\n   * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n   * Bitap algorithm.\n   * @param  text The text to search.\n   * @param  pattern The pattern to search for.\n   * @param  loc The location to search around.\n   * @return  Best match index or -1.\n\n   */\n    match_bitap_ (text: string, pattern: string, loc: number): number {\n    if (pattern.length > this.Match_MaxBits) {\n      throw new Error('Pattern too long for this browser.');\n    }\n\n    // Initialise the alphabet.\n    const s = this.match_alphabet_(pattern);\n\n    const dmp = this;  // 'this' becomes 'window' in a closure.\n\n    /**\n     * Compute and return the score for a match with e errors and x location.\n     * Accesses loc and pattern through being a closure.\n     * @param  e Number of errors in match.\n     * @param  x Location of match.\n     * @return  Overall score for match (0.0 = good, 1.0 = bad).\n\n     */\n    function match_bitapScore_(e: number, x: number): number {\n      const accuracy = e / pattern.length;\n      const proximity = Math.abs(loc - x);\n      if (!dmp.Match_Distance) {\n        // Dodge divide by zero error.\n        return proximity ? 1.0 : accuracy;\n      }\n      return accuracy + (proximity / dmp.Match_Distance);\n    }\n\n    // Highest score beyond which we give up.\n    let score_threshold = this.Match_Threshold;\n    // Is there a nearby exact match? (speedup)\n    let best_loc = text.indexOf(pattern, loc);\n    if (best_loc != -1) {\n      score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n      // What about in the other direction? (speedup)\n      best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n      if (best_loc != -1) {\n        score_threshold =\n            Math.min(match_bitapScore_(0, best_loc), score_threshold);\n      }\n    }\n\n    // Initialise the bit arrays.\n    const matchmask = 1 << (pattern.length - 1);\n    best_loc = -1;\n\n    let bin_min, bin_mid;\n    let bin_max = pattern.length + text.length;\n    let last_rd;\n    for (let d = 0; d < pattern.length; d++) {\n      // Scan for the best match; each iteration allows for one more error.\n      // Run a binary search to determine how far from 'loc' we can stray at this\n      // error level.\n      bin_min = 0;\n      bin_mid = bin_max;\n      while (bin_min < bin_mid) {\n        if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n          bin_min = bin_mid;\n        } else {\n          bin_max = bin_mid;\n        }\n        bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n      }\n      // Use the result from this iteration as the maximum for the next.\n      bin_max = bin_mid;\n      let start = Math.max(1, loc - bin_mid + 1);\n      const finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n      const rd = Array(finish + 2);\n      rd[finish + 1] = (1 << d) - 1;\n      for (let j = finish; j >= start; j--) {\n        // The alphabet (s) is a sparse hash, so the following line generates\n        // warnings.\n        const charMatch = s[text.charAt(j - 1)];\n        if (d === 0) {  // First pass: exact match.\n          rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n        } else {  // Subsequent passes: fuzzy match.\n          rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                  (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                  last_rd[j + 1];\n        }\n        if (rd[j] & matchmask) {\n          const score = match_bitapScore_(d, j - 1);\n          // This match will almost certainly be better than any existing match.\n          // But check anyway.\n          if (score <= score_threshold) {\n            // Told you so.\n            score_threshold = score;\n            best_loc = j - 1;\n            if (best_loc > loc) {\n              // When passing loc, don't exceed our current distance from loc.\n              start = Math.max(1, 2 * loc - best_loc);\n            } else {\n              // Already passed loc, downhill from here on in.\n              break;\n            }\n          }\n        }\n      }\n      // No hope for a (better) match at greater error levels.\n      if (match_bitapScore_(d + 1, loc) > score_threshold) {\n        break;\n      }\n      last_rd = rd;\n    }\n    return best_loc;\n  };\n\n\n  /**\n   * Initialise the alphabet for the Bitap algorithm.\n   * @param  pattern The text to encode.\n   * @return  Hash of character locations.\n\n   */\n    match_alphabet_ (pattern: string): { [character: string]: number } {\n    const s: { [character: string]: number } = {};\n    for (let i = 0; i < pattern.length; i++) {\n      s[pattern.charAt(i)] = 0;\n    }\n    for (let i = 0; i < pattern.length; i++) {\n      s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n    }\n    return s;\n  };\n\n\n  /**\n   * Increase the context until it is unique,\n   * but don't let the pattern expand beyond Match_MaxBits.\n   * @param  patch The patch to grow.\n   * @param  text Source text.\n\n   */\n    patch_addContext_ (patch: patch_obj, text: string) {\n    if (text.length == 0) {\n      return;\n    }\n    let pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n    let padding = 0;\n\n    // Look for the first and last matches of pattern in text.  If two different\n    // matches are found, increase the pattern length.\n    while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n          pattern.length < this.Match_MaxBits - this.Patch_Margin -\n          this.Patch_Margin) {\n      padding += this.Patch_Margin;\n      pattern = text.substring(patch.start2 - padding,\n                              patch.start2 + patch.length1 + padding);\n    }\n    // Add one chunk for good luck.\n    padding += this.Patch_Margin;\n\n    // Add the prefix.\n    const prefix = text.substring(patch.start2 - padding, patch.start2);\n    if (prefix) {\n      patch.diffs.unshift([DiffOp.Equal, prefix]);\n    }\n    // Add the suffix.\n    const suffix = text.substring(patch.start2 + patch.length1,\n                                patch.start2 + patch.length1 + padding);\n    if (suffix) {\n      patch.diffs.push([DiffOp.Equal, suffix]);\n    }\n\n    // Roll back the start points.\n    patch.start1 -= prefix.length;\n    patch.start2 -= prefix.length;\n    // Extend the lengths.\n    patch.length1 += prefix.length + suffix.length;\n    patch.length2 += prefix.length + suffix.length;\n  };\n\n\n  /**\n   * Compute a list of patches to turn text1 into text2.\n   * Use diffs if provided, otherwise compute it ourselves.\n   * There are four ways to call this function, depending on what data is\n   * available to the caller:\n   * Method 1:\n   * a = text1, b = text2\n   * Method 2:\n   * a = diffs\n   * Method 3 (optimal):\n   * a = text1, b = diffs\n   * Method 4 (deprecated, use method 3):\n   * a = text1, b = text2, c = diffs\n   *\n   * @param  a text1 (methods 1,3,4) or\n   * Array of diff tuples for text1 to text2 (method 2).\n   * @param  opt_b text2 (methods 1,4) or\n   * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n   * @param  opt_c Array of diff tuples\n   * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n   * @return  Array of Patch objects.\n   */\n    patch_make (a: string | Array<Diff>, opt_b: string | Array<Diff>, opt_c: string | Array<Diff>) {\n    let text1, diffs;\n    if (typeof a == 'string' && typeof opt_b == 'string' &&\n        typeof opt_c == 'undefined') {\n      // Method 1: text1, text2\n      // Compute diffs from text1 and text2.\n      text1 = (a);\n      diffs = this.diff_main(text1, (opt_b), true);\n      if (diffs.length > 2) {\n        this.diff_cleanupSemantic(diffs);\n        this.diff_cleanupEfficiency(diffs);\n      }\n    } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n        typeof opt_c == 'undefined') {\n      // Method 2: diffs\n      // Compute text1 from diffs.\n      diffs = (a);\n      text1 = this.diff_text1(diffs);\n    } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n        typeof opt_c == 'undefined') {\n      // Method 3: text1, diffs\n      text1 = (a);\n      diffs = (opt_b);\n    } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n        opt_c && typeof opt_c == 'object') {\n      // Method 4: text1, text2, diffs\n      // text2 is not used.\n      text1 = (a);\n      diffs = (opt_c);\n    } else {\n      throw new Error('Unknown call format to patch_make.');\n    }\n\n    if (diffs.length === 0) {\n      return [];  // Get rid of the null case.\n    }\n    const patches = [];\n    let patch = new patch_obj();\n    let patchDiffLength = 0;  // Keeping our own length const is faster in JS.\n    let char_count1 = 0;  // Number of characters into the text1 string.\n    let char_count2 = 0;  // Number of characters into the text2 string.\n    // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n    // text2 (postpatch_text).  We recreate the patches one by one to determine\n    // context info.\n    let prepatch_text = text1;\n    let postpatch_text = text1;\n    for (let x = 0; x < diffs.length; x++) {\n      const diff_type = diffs[x][0];\n      const diff_text = diffs[x][1];\n\n      if (!patchDiffLength && diff_type !== DiffOp.Equal) {\n        // A new patch starts here.\n        patch.start1 = char_count1;\n        patch.start2 = char_count2;\n      }\n\n      switch (diff_type) {\n        case DiffOp.Insert:\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length2 += diff_text.length;\n          postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                          postpatch_text.substring(char_count2);\n          break;\n        case DiffOp.Delete:\n          patch.length1 += diff_text.length;\n          patch.diffs[patchDiffLength++] = diffs[x];\n          postpatch_text = postpatch_text.substring(0, char_count2) +\n                          postpatch_text.substring(char_count2 +\n                              diff_text.length);\n          break;\n        case DiffOp.Equal:\n          if (diff_text.length <= 2 * this.Patch_Margin &&\n              patchDiffLength && diffs.length != x + 1) {\n            // Small equality inside a patch.\n            patch.diffs[patchDiffLength++] = diffs[x];\n            patch.length1 += diff_text.length;\n            patch.length2 += diff_text.length;\n          } else if (diff_text.length >= 2 * this.Patch_Margin) {\n            // Time for a new patch.\n            if (patchDiffLength) {\n              this.patch_addContext_(patch, prepatch_text);\n              patches.push(patch);\n              patch = new patch_obj();\n              patchDiffLength = 0;\n              // Unlike Unidiff, our patch lists have a rolling context.\n              // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff\n              // Update prepatch text & pos to reflect the application of the\n              // just completed patch.\n              prepatch_text = postpatch_text;\n              char_count1 = char_count2;\n            }\n          }\n          break;\n      }\n\n      // Update the current character count.\n      if (diff_type !== DiffOp.Insert) {\n        char_count1 += diff_text.length;\n      }\n      if (diff_type !== DiffOp.Delete) {\n        char_count2 += diff_text.length;\n      }\n    }\n    // Pick up the leftover patch if not empty.\n    if (patchDiffLength) {\n      this.patch_addContext_(patch, prepatch_text);\n      patches.push(patch);\n    }\n\n    return patches;\n  };\n\n\n  /**\n   * Given an array of patches, return another array that is identical.\n   * @param  patches Array of Patch objects.\n   * @return  Array of Patch objects.\n   */\n    patch_deepCopy (patches: Array<patch_obj>): Array<patch_obj> {\n    // Making deep copies is hard in JavaScript.\n    const patchesCopy = [];\n    for (let x = 0; x < patches.length; x++) {\n      const patch = patches[x];\n      const patchCopy = new patch_obj();\n      patchCopy.diffs = [];\n      for (let y = 0; y < patch.diffs.length; y++) {\n        patchCopy.diffs[y] = [patch.diffs[y][0], patch.diffs[y][1]];\n      }\n      patchCopy.start1 = patch.start1;\n      patchCopy.start2 = patch.start2;\n      patchCopy.length1 = patch.length1;\n      patchCopy.length2 = patch.length2;\n      patchesCopy[x] = patchCopy;\n    }\n    return patchesCopy;\n  };\n\n\n  /**\n   * Merge a set of patches onto the text.  Return a patched text, as well\n   * as a list of true/false values indicating which patches were applied.\n   * @param  patches Array of Patch objects.\n   * @param  text Old text.\n   * @return  Two element Array, containing the\n   *      new text and an array of boolean values.\n   */\n    patch_apply (patches: Array<patch_obj>, text: string) {\n    if (patches.length == 0) {\n      return [text, []];\n    }\n\n    // Deep copy the patches so that no changes are made to originals.\n    patches = this.patch_deepCopy(patches);\n\n    const nullPadding = this.patch_addPadding(patches);\n    text = nullPadding + text + nullPadding;\n\n    this.patch_splitMax(patches);\n    // delta keeps track of the offset between the expected and actual location\n    // of the previous patch.  If there are patches expected at positions 10 and\n    // 20, but the first patch was found at 12, delta is 2 and the second patch\n    // has an effective expected position of 22.\n    let delta = 0;\n    const results = [];\n    for (let x = 0; x < patches.length; x++) {\n      const expected_loc = patches[x].start2 + delta;\n      const text1 = this.diff_text1(patches[x].diffs);\n      let start_loc;\n      let end_loc = -1;\n      if (text1.length > this.Match_MaxBits) {\n        // patch_splitMax will only provide an oversized pattern in the case of\n        // a monster delete.\n        start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                    expected_loc);\n        if (start_loc != -1) {\n          end_loc = this.match_main(text,\n              text1.substring(text1.length - this.Match_MaxBits),\n              expected_loc + text1.length - this.Match_MaxBits);\n          if (end_loc == -1 || start_loc >= end_loc) {\n            // Can't find valid trailing context.  Drop this patch.\n            start_loc = -1;\n          }\n        }\n      } else {\n        start_loc = this.match_main(text, text1, expected_loc);\n      }\n      if (start_loc == -1) {\n        // No match found.  :(\n        results[x] = false;\n        // Subtract the delta for this failed patch from subsequent patches.\n        delta -= patches[x].length2 - patches[x].length1;\n      } else {\n        // Found a match.  :)\n        results[x] = true;\n        delta = start_loc - expected_loc;\n        let text2;\n        if (end_loc == -1) {\n          text2 = text.substring(start_loc, start_loc + text1.length);\n        } else {\n          text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n        }\n        if (text1 == text2) {\n          // Perfect match, just shove the replacement text in.\n          text = text.substring(0, start_loc) +\n                this.diff_text2(patches[x].diffs) +\n                text.substring(start_loc + text1.length);\n        } else {\n          // Imperfect match.  Run a diff to get a framework of equivalent\n          // indices.\n          const diffs = this.diff_main(text1, text2, false);\n          if (text1.length > this.Match_MaxBits &&\n              this.diff_levenshtein(diffs) / text1.length >\n              this.Patch_DeleteThreshold) {\n            // The end points match, but the content is unacceptably bad.\n            results[x] = false;\n          } else {\n            this.diff_cleanupSemanticLossless(diffs);\n            let index1 = 0;\n            let index2;\n            for (let y = 0; y < patches[x].diffs.length; y++) {\n              const mod = patches[x].diffs[y];\n              if (mod[0] !== DiffOp.Equal) {\n                index2 = this.diff_xIndex(diffs, index1);\n              }\n              if (mod[0] === DiffOp.Insert) {  // Insertion\n                text = text.substring(0, start_loc + index2) + mod[1] +\n                      text.substring(start_loc + index2);\n              } else if (mod[0] === DiffOp.Delete) {  // Deletion\n                text = text.substring(0, start_loc + index2) +\n                      text.substring(start_loc + this.diff_xIndex(diffs,\n                          index1 + mod[1].length));\n              }\n              if (mod[0] !== DiffOp.Delete) {\n                index1 += mod[1].length;\n              }\n            }\n          }\n        }\n      }\n    }\n    // Strip the padding off.\n    text = text.substring(nullPadding.length, text.length - nullPadding.length);\n    return [text, results];\n  };\n\n\n  /**\n   * Add some padding on text start and end so that edges can match something.\n   * Intended to be called only from within patch_apply.\n   * @param  patches Array of Patch objects.\n   * @return  The padding string added to each side.\n   */\n    patch_addPadding (patches: Array<patch_obj>) {\n    const paddingLength = this.Patch_Margin;\n    let nullPadding = '';\n    for (let x = 1; x <= paddingLength; x++) {\n      nullPadding += String.fromCharCode(x);\n    }\n\n    // Bump all the patches forward.\n    for (let x = 0; x < patches.length; x++) {\n      patches[x].start1 += paddingLength;\n      patches[x].start2 += paddingLength;\n    }\n\n    // Add some padding on start of first diff.\n    let patch = patches[0];\n    let diffs = patch.diffs;\n    if (diffs.length == 0 || diffs[0][0] != DiffOp.Equal) {\n      // Add nullPadding equality.\n      diffs.unshift([DiffOp.Equal, nullPadding]);\n      patch.start1 -= paddingLength;  // Should be 0.\n      patch.start2 -= paddingLength;  // Should be 0.\n      patch.length1 += paddingLength;\n      patch.length2 += paddingLength;\n    } else if (paddingLength > diffs[0][1].length) {\n      // Grow first equality.\n      const extraLength = paddingLength - diffs[0][1].length;\n      diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n      patch.start1 -= extraLength;\n      patch.start2 -= extraLength;\n      patch.length1 += extraLength;\n      patch.length2 += extraLength;\n    }\n\n    // Add some padding on end of last diff.\n    patch = patches[patches.length - 1];\n    diffs = patch.diffs;\n    if (diffs.length == 0 || diffs[diffs.length - 1][0] != DiffOp.Equal) {\n      // Add nullPadding equality.\n      diffs.push([DiffOp.Equal, nullPadding]);\n      patch.length1 += paddingLength;\n      patch.length2 += paddingLength;\n    } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n      // Grow last equality.\n      const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n      diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n      patch.length1 += extraLength;\n      patch.length2 += extraLength;\n    }\n\n    return nullPadding;\n  };\n\n\n  /**\n   * Look through the patches and break up any which are longer than the maximum\n   * limit of the match algorithm.\n   * Intended to be called only from within patch_apply.\n   * @param  patches Array of Patch objects.\n   */\n    patch_splitMax = function(patches: Array<patch_obj>) {\n    const patch_size = this.Match_MaxBits;\n    for (let x = 0; x < patches.length; x++) {\n      if (patches[x].length1 <= patch_size) {\n        continue;\n      }\n      const bigpatch = patches[x];\n      // Remove the big old patch.\n      patches.splice(x--, 1);\n      let start1 = bigpatch.start1;\n      let start2 = bigpatch.start2;\n      let precontext = '';\n      while (bigpatch.diffs.length !== 0) {\n        // Create one of several smaller patches.\n        const patch = new patch_obj();\n        let empty = true;\n        patch.start1 = start1 - precontext.length;\n        patch.start2 = start2 - precontext.length;\n        if (precontext !== '') {\n          patch.length1 = patch.length2 = precontext.length;\n          patch.diffs.push([DiffOp.Equal, precontext]);\n        }\n        while (bigpatch.diffs.length !== 0 &&\n              patch.length1 < patch_size - this.Patch_Margin) {\n          const diff_type = bigpatch.diffs[0][0];\n          let diff_text = bigpatch.diffs[0][1];\n          if (diff_type === DiffOp.Insert) {\n            // Insertions are harmless.\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n            patch.diffs.push(bigpatch.diffs.shift());\n            empty = false;\n          } else if (diff_type === DiffOp.Delete && patch.diffs.length == 1 &&\n                    patch.diffs[0][0] == DiffOp.Equal &&\n                    diff_text.length > 2 * patch_size) {\n            // This is a large deletion.  Let it pass in one chunk.\n            patch.length1 += diff_text.length;\n            start1 += diff_text.length;\n            empty = false;\n            patch.diffs.push([diff_type, diff_text]);\n            bigpatch.diffs.shift();\n          } else {\n            // Deletion or equality.  Only take as much as we can stomach.\n            diff_text = diff_text.substring(0,\n                patch_size - patch.length1 - this.Patch_Margin);\n            patch.length1 += diff_text.length;\n            start1 += diff_text.length;\n            if (diff_type === DiffOp.Equal) {\n              patch.length2 += diff_text.length;\n              start2 += diff_text.length;\n            } else {\n              empty = false;\n            }\n            patch.diffs.push([diff_type, diff_text]);\n            if (diff_text == bigpatch.diffs[0][1]) {\n              bigpatch.diffs.shift();\n            } else {\n              bigpatch.diffs[0][1] =\n                  bigpatch.diffs[0][1].substring(diff_text.length);\n            }\n          }\n        }\n        // Compute the head context for the next patch.\n        precontext = this.diff_text2(patch.diffs);\n        precontext =\n            precontext.substring(precontext.length - this.Patch_Margin);\n        // Append the end context for this patch.\n        const postcontext = this.diff_text1(bigpatch.diffs)\n                              .substring(0, this.Patch_Margin);\n        if (postcontext !== '') {\n          patch.length1 += postcontext.length;\n          patch.length2 += postcontext.length;\n          if (patch.diffs.length !== 0 &&\n              patch.diffs[patch.diffs.length - 1][0] === DiffOp.Equal) {\n            patch.diffs[patch.diffs.length - 1][1] += postcontext;\n          } else {\n            patch.diffs.push([DiffOp.Equal, postcontext]);\n          }\n        }\n        if (!empty) {\n          patches.splice(++x, 0, patch);\n        }\n      }\n    }\n  };\n\n\n  /**\n   * Take a list of patches and return a textual representation.\n   * @param  patches Array of Patch objects.\n   * @return  Text representation of patches.\n   */\n    patch_toText (patches: Array<patch_obj>) {\n    const text = [];\n    for (let x = 0; x < patches.length; x++) {\n      text[x] = patches[x];\n    }\n    return text.join('');\n  };\n\n\n  /**\n   * Parse a textual representation of patches and return a list of Patch objects.\n   * @param  textline Text representation of patches.\n   * @return  Array of Patch objects.\n   * @throws {!Error} If invalid input.\n   */\n    patch_fromText (textline: string): Array<patch_obj> {\n    const patches: Array<patch_obj> = [];\n    if (!textline) {\n      return patches;\n    }\n    const text = textline.split('\\n');\n    let textPointer = 0;\n    const patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n    while (textPointer < text.length) {\n      const m = text[textPointer].match(patchHeader);\n      if (!m) {\n        throw new Error('Invalid patch string: ' + text[textPointer]);\n      }\n      const patch = new patch_obj();\n      patches.push(patch);\n      patch.start1 = parseInt(m[1], 10);\n      if (m[2] === '') {\n        patch.start1--;\n        patch.length1 = 1;\n      } else if (m[2] == '0') {\n        patch.length1 = 0;\n      } else {\n        patch.start1--;\n        patch.length1 = parseInt(m[2], 10);\n      }\n\n      patch.start2 = parseInt(m[3], 10);\n      if (m[4] === '') {\n        patch.start2--;\n        patch.length2 = 1;\n      } else if (m[4] == '0') {\n        patch.length2 = 0;\n      } else {\n        patch.start2--;\n        patch.length2 = parseInt(m[4], 10);\n      }\n      textPointer++;\n\n      while (textPointer < text.length) {\n        const sign = text[textPointer].charAt(0);\n        let line: string;\n        try {\n          line = decodeURI(text[textPointer].substring(1));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in patch_fromText: ' + line);\n        }\n        if (sign == '-') {\n          // Deletion.\n          patch.diffs.push([DiffOp.Delete, line]);\n        } else if (sign == '+') {\n          // Insertion.\n          patch.diffs.push([DiffOp.Insert, line]);\n        } else if (sign == ' ') {\n          // Minor equality.\n          patch.diffs.push([DiffOp.Equal, line]);\n        } else if (sign == '@') {\n          // Start of next patch.\n          break;\n        } else if (sign === '') {\n          // Blank line?  Whatever.\n        } else {\n          // WTF?\n          throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n        }\n        textPointer++;\n      }\n    }\n    return patches;\n  };\n\n}\n\n\n/**\n * Class representing one patch operation.\n\n */\nexport class patch_obj {\n\n  constructor() {  }\n\n  diffs: Array<Diff> = [];\n  start1: number = null;\n  start2: number = null;\n  length1: number = 0;\n  length2: number = 0;\n\n  /**\n   * Emmulate GNU diff's format.\n   * Header: @@ -382,8 +481,9 @@\n   * Indicies are printed as 1-based, not 0-based.\n   */\n  toString = function() {\n    let coords1, coords2;\n    if (this.length1 === 0) {\n      coords1 = this.start1 + ',0';\n    } else if (this.length1 == 1) {\n      coords1 = this.start1 + 1;\n    } else {\n      coords1 = (this.start1 + 1) + ',' + this.length1;\n    }\n    if (this.length2 === 0) {\n      coords2 = this.start2 + ',0';\n    } else if (this.length2 == 1) {\n      coords2 = this.start2 + 1;\n    } else {\n      coords2 = (this.start2 + 1) + ',' + this.length2;\n    }\n    const text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n    let op;\n    // Escape the body of the patch with %xx notation.\n    for (let x = 0; x < this.diffs.length; x++) {\n      switch (this.diffs[x][0]) {\n        case DiffOp.Insert:\n          op = '+';\n          break;\n        case DiffOp.Delete:\n          op = '-';\n          break;\n        case DiffOp.Equal:\n          op = ' ';\n          break;\n      }\n      text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n    }\n    return text.join('').replace(/%20/g, ' ');\n  }\n}\n\nexport { DiffMatchPatch };\n","import { Injectable, OnInit } from '@angular/core';\nimport { DiffMatchPatch, DiffOp } from './diffMatchPatch';\n\n@Injectable()\nexport class DiffMatchPatchService implements OnInit {\n\n  constructor(private dmp: DiffMatchPatch) {   }\n\n  ngOnInit () {\n\n  }\n\n  getDiff(left: string, right: string) {\n     return this.dmp.diff_main(left, right);\n  }\n\n  getSemanticDiff(left: string, right: string) {\n    const diffs = this.dmp.diff_main(left, right);\n    this.dmp.diff_cleanupSemantic(diffs);\n    return diffs;\n  }\n\n  getProcessingDiff(left: string, right: string) {\n    const diffs = this.dmp.diff_main(left, right);\n    this.dmp.diff_cleanupEfficiency(diffs);\n    return diffs;\n  }\n\n  getLineDiff(left: string, right: string) {\n    const chars = this.dmp.diff_linesToChars_(left, right);\n    const diffs = this.dmp.diff_main(chars.chars1, chars.chars2, false);\n    this.dmp.diff_charsToLines_(diffs, chars.lineArray);\n    return diffs;\n  }\n\n  getDmp() {\n    return this.dmp;\n  }\n\n}\n","import { Component, Input, OnInit, OnChanges } from '@angular/core';\nimport { Diff, DiffOp } from './diffMatchPatch';\nimport { DiffMatchPatchService } from './diffMatchPatch.service';\n\n/* Holds the state of the calculation of the diff result we intend to display.\n *  > lines contains the data that will be displayed on screen.\n *  > lineLeft keeps track of the document line number in the [left] input.\n *  > lineRight keeps track of the document line number in the [right] input.\n */\ntype DiffCalculation = {\n  lines: Array<[string, string, string, string]>,\n  lineLeft: number,\n  lineRight: number\n};\n\n@Component({\n  selector: 'dmp-line-compare',\n  styles: [`\n    div.dmp-line-compare {\n      display: flex;\n      flex-direction: row;\n      border: 1px solid #808080;\n      font-family: Consolas, Courier, monospace;\n      width: 911px;\n    }\n    div.dmp-line-compare-margin {\n      width: 101px;\n    }\n    div.dmp-line-compare-content {\n      position: relative;\n      top: 0px;\n      left: 0px;\n      flex-grow: 1;\n      overflow-x: scroll;\n    }\n    div.dmp-line-compare-content-wrapper {\n      position: absolute;\n      top: 0px;\n      left: 0px;\n      display: flex;\n      flex-direction: column;\n      align-items: stretch;\n    }\n    div.dmp-line-compare-left {\n      width: 50px;\n      text-align: center;\n      color: #484848;\n    }\n    div.dmp-line-compare-equal>div.dmp-line-compare-left,\n      div.dmp-line-compare-equal>div.dmp-line-compare-right {\n      background-color: #dedede;\n    }\n    div.dmp-line-compare-insert>div.dmp-line-compare-left,\n      div.dmp-line-compare-insert>div.dmp-line-compare-right {\n      background-color: #8bfb6f;\n    }\n    div.dmp-line-compare-delete>div.dmp-line-compare-left,\n      div.dmp-line-compare-delete>div.dmp-line-compare-right {\n      background-color: #f56868;\n    }\n    div.dmp-line-compare-right {\n      width: 50px;\n      text-align: center;\n      color: #484848;\n      border-right: 1px solid #888888;\n    }\n    div.dmp-line-compare-text {\n      white-space: pre;\n      padding-left: 10px;\n      min-width: 800px;\n    }\n    .dmp-line-compare-delete {\n      background-color: #ff8c8c;\n    }\n    .dmp-line-compare-insert {\n      background-color: #9dff97;\n    }\n    .dmp-line-compare-delete>div {\n      display: inline-block;\n    }  \n    .dmp-line-compare-insert>div {\n      display: inline-block;\n    }\n    .dmp-line-compare-equal>div {\n      display: inline-block;\n    }\n    .dmp-margin-bottom-spacer {\n      height: 20px;\n      background-color: #dedede;\n      border-right: 1px solid #888888;\n    }\n  `],\n  template: `\n    <div class=\"dmp-line-compare-no-changes-text\" *ngIf=\"isContentEqual\">\n      There are no changes to display.\n    </div>    \n    <div class=\"dmp-line-compare\" *ngIf=\"!isContentEqual\">\n      <div class=\"dmp-line-compare-margin\">\n        <div [ngClass]=\"lineDiff[0]\" *ngFor=\"let lineDiff of calculatedDiff\">\n          <div class=\"dmp-line-compare-left\">{{lineDiff[1]}}</div><!-- No space\n        --><div class=\"dmp-line-compare-right\">{{lineDiff[2]}}</div>\n        </div>\n        <div class=\"dmp-margin-bottom-spacer\"></div>\n      </div><!-- No space\n   --><div class=\"dmp-line-compare-content\">\n        <div class=\"dmp-line-compare-content-wrapper\">\n          <div [ngClass]=\"lineDiff[0]\" *ngFor=\"let lineDiff of calculatedDiff\">\n            <div class=\"dmp-line-compare-text\">{{lineDiff[3]}}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class LineCompareComponent implements OnInit, OnChanges {\n  @Input()\n  public left: string | number | boolean;\n  @Input()\n  public right: string | number | boolean;\n  // The number of lines of context to provide either side of a DiffOp.Insert or DiffOp.Delete diff.\n  // Context is taken from a DiffOp.Equal section.\n  @Input()\n  public lineContextSize: number;\n\n  public calculatedDiff: Array<[string, string, string, string]>;\n  public isContentEqual: boolean;\n\n  public constructor(\n      private dmp: DiffMatchPatchService) {}\n\n  public ngOnInit(): void {\n    this.updateHtml();\n  }\n\n  public ngOnChanges(): void {\n    this.updateHtml();\n  }\n\n  private updateHtml(): void {\n    if (typeof this.left === 'number' || typeof this.left === 'boolean') {\n      this.left = this.left.toString();\n    }\n    if (typeof this.right === 'number' || typeof this.right === 'boolean') {\n      this.right = this.right.toString();\n    }\n    this.calculateLineDiff(this.dmp.getLineDiff(this.left, this.right));\n  }\n\n  private calculateLineDiff(diffs: Array<Diff>): void {\n    const diffCalculation: DiffCalculation = {\n      lines: [],\n      lineLeft: 1,\n      lineRight: 1\n    };\n\n    this.isContentEqual = diffs.length === 1 && diffs[0][0] === DiffOp.Equal;\n    if (this.isContentEqual) {\n      this.calculatedDiff = [];\n      return;\n    }\n\n    for (let i = 0; i < diffs.length; i++) {\n      const diff = diffs[i];\n      let diffLines: string[] = diff[1].split(/\\r?\\n/);\n\n      // If the original line had a \\r\\n at the end then remove the\n      // empty string after it.\n      if (diffLines[diffLines.length - 1].length == 0) {\n        diffLines.pop();\n      }\n\n      switch (diff[0]) {\n        case DiffOp.Equal: {\n          const isFirstDiff = i === 0;\n          const isLastDiff = i === diffs.length - 1;\n          this.outputEqualDiff(diffLines, diffCalculation, isFirstDiff, isLastDiff);\n          break;\n        }\n        case DiffOp.Delete: {\n          this.outputDeleteDiff(diffLines, diffCalculation);\n          break;\n        }\n        case DiffOp.Insert: {\n          this.outputInsertDiff(diffLines, diffCalculation);\n          break;\n        }\n      }\n    }\n\n    this.calculatedDiff = diffCalculation.lines;\n  }\n\n  /* If the number of diffLines is greater than lineContextSize then we may need to adjust the diff\n   * that is output.\n   *   > If the first diff of a document is DiffOp.Equal then the leading lines can be dropped\n   *     leaving the last 'lineContextSize' lines for context.\n   *   > If the last diff of a document is DiffOp.Equal then the trailing lines can be dropped\n   *     leaving the first 'lineContextSize' lines for context.\n   *   > If the diff is a DiffOp.Equal occurs in the middle then the diffs either side of it must be\n   *     DiffOp.Insert or DiffOp.Delete. If it has more than 2 * 'lineContextSize' lines of content\n   *     then the middle lines are dropped leaving the first 'lineContextSize' and last 'lineContextSize'\n   *     lines for context. A special line is inserted with '...' indicating that content is skipped.\n   *\n   * A document cannot consist of a single Diff with DiffOp.Equal and reach this function because\n   * in this case the calculateLineDiff method returns early.\n   */\n  private outputEqualDiff(\n      diffLines: string[],\n      diffCalculation: DiffCalculation,\n      isFirstDiff: boolean,\n      isLastDiff: boolean): void {\n    if (this.lineContextSize && diffLines.length > this.lineContextSize) {\n      if (isFirstDiff) {\n        // Take the last 'lineContextSize' lines from the first diff\n        const lineIncrement = diffLines.length - this.lineContextSize;\n        diffCalculation.lineLeft += lineIncrement;\n        diffCalculation.lineRight += lineIncrement;\n        diffLines = diffLines.slice(diffLines.length - this.lineContextSize, diffLines.length);\n      }\n      else if (isLastDiff) {\n        // Take only the first 'lineContextSize' lines from the final diff\n        diffLines = diffLines.slice(0, this.lineContextSize);\n      }\n      else if (diffLines.length > 2 * this.lineContextSize) {\n        // Take the first 'lineContextSize' lines from this diff to provide context for the last diff\n        this.outputEqualDiffLines(diffLines.slice(0, this.lineContextSize), diffCalculation);\n\n        // Output a special line indicating that some content is equal and has been skipped\n        diffCalculation.lines.push(['dmp-line-compare-equal', '...', '...', '...']);\n        const numberOfSkippedLines = diffLines.length - (2 * this.lineContextSize);\n        diffCalculation.lineLeft += numberOfSkippedLines;\n        diffCalculation.lineRight += numberOfSkippedLines;\n\n        // Take the last 'lineContextSize' lines from this diff to provide context for the next diff\n        this.outputEqualDiffLines(diffLines.slice(diffLines.length - this.lineContextSize), diffCalculation);\n        // This if branch has already output the diff lines so we return early to avoid outputting the lines\n        // at the end of the method.\n        return;\n      }\n    }\n    this.outputEqualDiffLines(diffLines, diffCalculation);\n  }\n\n  private outputEqualDiffLines(\n      diffLines: string[],\n      diffCalculation: DiffCalculation): void {\n    for (const line of diffLines) {\n      diffCalculation.lines.push(['dmp-line-compare-equal', `${diffCalculation.lineLeft}`, `${diffCalculation.lineRight}`, line]);\n      diffCalculation.lineLeft++;\n      diffCalculation.lineRight++;\n    }\n  }\n\n  private outputDeleteDiff(\n      diffLines: string[],\n      diffCalculation: DiffCalculation): void {\n    for (const line of diffLines) {\n      diffCalculation.lines.push(['dmp-line-compare-delete', `${diffCalculation.lineLeft}`, '-', line]);\n      diffCalculation.lineLeft++;\n    }\n  }\n\n  private outputInsertDiff(\n      diffLines: string[],\n      diffCalculation: DiffCalculation): void {\n    for (const line of diffLines) {\n      diffCalculation.lines.push(['dmp-line-compare-insert', '-', `${diffCalculation.lineRight}`, line]);\n      diffCalculation.lineRight++;\n    }\n  }\n}\n","import { Directive, ElementRef, Input, OnInit, OnChanges } from '@angular/core';\nimport { DiffMatchPatchService } from './diffMatchPatch.service';\nimport { Diff, DiffOp } from './diffMatchPatch';\n\n@Directive({\n  selector: '[diff]'\n})\nexport class DiffDirective implements OnInit, OnChanges {\n\n  @Input() left: string;\n  @Input() right: string;\n\n  public constructor(\n    private el: ElementRef,\n    private dmp: DiffMatchPatchService) {  }\n\n  public ngOnInit(): void {\n    this.updateHtml();\n  }\n\n  public ngOnChanges(): void {\n    this.updateHtml();\n  }\n\n  private updateHtml(): void {\n    this.el.nativeElement.innerHTML = this.createHtml(\n      this.dmp.getDiff(this.left, this.right));\n  }\n  \n  private createHtml(diffs: Array<Diff>): string {\n    let html: string;\n    html = '<div>';\n    for(let diff of diffs) {\n      diff[1] = diff[1].replace(/\\n/g, '<br/>');\n\n      if(diff[0] === DiffOp.Equal) {\n        html += '<span class=\"equal\">' + diff[1] + '</span>';\n      }\n      if(diff[0] === DiffOp.Delete) {\n        html += '<del>' + diff[1] + '</del>';\n      }\n      if(diff[0] === DiffOp.Insert) {\n        html += '<ins>' + diff[1] + '</ins>';\n      }\n    }\n    html += '</div>';\n    return html;\n  }\n}\n","import { Directive, ElementRef, Input, OnInit, OnChanges } from '@angular/core';\nimport { DiffMatchPatchService } from './diffMatchPatch.service';\nimport { Diff, DiffOp } from './diffMatchPatch';\n\n@Directive({\n  selector: '[lineDiff]',\n})\nexport class LineDiffDirective implements OnInit, OnChanges {\n  @Input() left: string | number | boolean;\n  @Input() right: string | number | boolean;\n\n  public constructor(\n    private el: ElementRef,\n    private dmp: DiffMatchPatchService) {  }\n\n  public ngOnInit(): void {\n    this.updateHtml();\n  }\n\n  public ngOnChanges(): void {\n    this.updateHtml();\n  }\n\n  private updateHtml(): void {\n    if (typeof this.left === 'number' || typeof this.left === 'boolean') {\n      this.left = this.left.toString();\n    }\n    if (typeof this.right === 'number' || typeof this.right === 'boolean') {\n      this.right = this.right.toString();\n    }\n    this.el.nativeElement.innerHTML = this.createHtml(this.dmp.getLineDiff(this.left, this.right));\n  }\n\n  // TODO: Need to fix this for line diffs\n  private createHtml(diffs: Array<Diff>): string {\n    let html: string;\n    html = '<div>';\n    for (let diff of diffs) {\n      if (diff[0] === DiffOp.Equal) {\n        html += '<span class=\"equal\">' + diff[1] + '</span>';\n      }\n      if (diff[0] === DiffOp.Delete) {\n        html += '<div class=\\\"del\\\"> - <del>' + diff[1] + '</del></div>\\n';\n      }\n      if (diff[0] === DiffOp.Insert) {\n        html += '<div class=\\\"ins\\\"> + <ins>' + diff[1] + '</ins></div>\\n';\n      }\n    }\n    html += '</div>';\n    return html;\n  }\n}\n","import { Directive, ElementRef, Input, OnInit, OnChanges } from '@angular/core';\nimport { DiffMatchPatchService } from './diffMatchPatch.service';\nimport { Diff, DiffOp } from './diffMatchPatch';\n\n@Directive({\n  selector: '[processingDiff]'\n})\nexport class ProcessingDiffDirective implements OnInit, OnChanges {\n  @Input() left: string;\n  @Input() right: string;\n\n  public constructor(\n    private el: ElementRef,\n    private dmp: DiffMatchPatchService) {  }\n\n  public ngOnInit(): void {\n    this.updateHtml();\n  }\n\n  public ngOnChanges(): void {\n    this.updateHtml();\n  }\n\n  private updateHtml(): void {\n    this.el.nativeElement.innerHTML = this.createHtml(\n      this.dmp.getProcessingDiff(this.left, this.right));\n  }\n\n  // TODO: Need to fix this for line diffs\n  private createHtml(diffs: Array<Diff>): string {\n    let html: string;\n    html = '<div>';\n    for (let diff of diffs) {\n      diff[1] = diff[1].replace(/\\n/g, '<br/>');\n\n      if (diff[0] === DiffOp.Equal) {\n        html += '<span class=\"equal\">' + diff[1] + '</span>';\n      }\n      if (diff[0] === DiffOp.Delete) {\n        html += '<del>' + diff[1] + '</del>';\n      }\n      if (diff[0] === DiffOp.Insert) {\n        html += '<ins>' + diff[1] + '</ins>';\n      }\n    }\n    html += '</div>';\n    return html;\n  }\n}\n","import { Directive, ElementRef, Input, OnInit, OnChanges } from '@angular/core';\nimport { DiffMatchPatchService } from './diffMatchPatch.service';\nimport { Diff, DiffOp } from './diffMatchPatch';\n\n@Directive({\n  selector: '[semanticDiff]'\n})\nexport class SemanticDiffDirective implements OnInit, OnChanges {\n  @Input() left: string | number | boolean;\n  @Input() right: string | number | boolean;\n\n  public constructor(\n    private el: ElementRef,\n    private dmp: DiffMatchPatchService) {  }\n\n  public ngOnInit(): void {\n    this.updateHtml();\n  }\n\n  public ngOnChanges(): void {\n    this.updateHtml();\n  }\n\n  private updateHtml(): void {\n    if (!this.left) {\n      this.left = \"\";\n    }\n    if (!this.right) {\n      this.right = \"\";\n    }\n    if (typeof this.left === 'number' || typeof this.left === 'boolean') {\n      this.left = this.left.toString();\n    }\n    if (typeof this.right === 'number' || typeof this.right === 'boolean') {\n      this.right = this.right.toString();\n    }\n    this.el.nativeElement.innerHTML = this.createHtml(\n      this.dmp.getSemanticDiff(this.left, this.right));\n  }\n\n  // TODO: Need to fix this for line diffs\n  private createHtml(diffs: Array<Diff>): string {\n    let html: string;\n    html = '<div>';\n    for (let diff of diffs) {\n      diff[1] = diff[1].replace(/\\n/g, '<br/>');\n\n      if (diff[0] === DiffOp.Equal) {\n        html += '<span class=\"equal\">' + diff[1] + '</span>';\n      }\n      if (diff[0] === DiffOp.Delete) {\n        html += '<del>' + diff[1] + '</del>';\n      }\n      if (diff[0] === DiffOp.Insert) {\n        html += '<ins>' + diff[1] + '</ins>';\n      }\n    }\n    html += '</div>';\n    return html;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DiffDirective } from './diff.directive';\nimport { LineDiffDirective } from './lineDiff.directive';\nimport { ProcessingDiffDirective } from './processingDiff.directive';\nimport { SemanticDiffDirective } from './semanticDiff.directive';\nimport { LineCompareComponent } from './lineCompare.component';\n\nimport { DiffMatchPatch } from './diffMatchPatch';\nimport { DiffMatchPatchService } from './diffMatchPatch.service';\n\n@NgModule({\n  declarations: [\n    DiffDirective,\n    LineDiffDirective,\n    ProcessingDiffDirective,\n    SemanticDiffDirective,\n    LineCompareComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    DiffDirective,\n    LineDiffDirective,\n    ProcessingDiffDirective,\n    SemanticDiffDirective,\n    LineCompareComponent\n  ],\n  providers: [\n    DiffMatchPatch,\n    DiffMatchPatchService\n  ]\n})\nexport class DiffMatchPatchModule { }\n"],"names":["tslib_1.__values"],"mappings":"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"}
