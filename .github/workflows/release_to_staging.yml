# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build and Deploy to Staging.

on:
  push:
    branches: [ master ]

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v1

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: npm ci and npm run build
        run: |
          cd oulipo-webapp
          npm ci
          npm run build:ci
  build-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
#    Do not use --file in mvn parameters, this causes issues with classpath loading when trying to use persistence modules.
    - name: Build Common Libraries
      run: ( cd ./common && mvn -B install )
    - name: Build Gateway service
      run: ( cd ./gateway && mvn -B install dockerfile:build )
    - name: Build Metadata service
      run: ( cd ./metadata && mvn -B install dockerfile:build )
    - name: Build Notify service
      run: ( cd ./notify && mvn -B install dockerfile:build )
    - name: Build Project service
      run: ( cd ./project && mvn -B install dockerfile:build )
    - name: Build User service
      run: ( cd ./user && mvn -B install dockerfile:build )
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Push images to ECR
      env:
        ECR_REGISTRY: 791488284522.dkr.ecr.eu-west-1.amazonaws.com
        ECR_REPOSITORY: ${{ secrets.TF_VARS_ecr_repository_name }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker images

        docker tag meggot/oulipo/gateway:2.0-SNAPSHOT $ECR_REGISTRY/meggot/oulipo/gateway:LATEST
        docker push $ECR_REGISTRY/meggot/oulipo/gateway:LATEST

        docker tag meggot/oulipo/metadata:2.0-SNAPSHOT $ECR_REGISTRY/meggot/oulipo/metadata:LATEST
        docker push $ECR_REGISTRY/meggot/oulipo/metadata:LATEST

        docker tag meggot/oulipo/notify:2.0-SNAPSHOT $ECR_REGISTRY/meggot/oulipo/notify:LATEST
        docker push $ECR_REGISTRY/meggot/oulipo/notify:LATEST

        docker tag meggot/oulipo/project:2.0-SNAPSHOT $ECR_REGISTRY/meggot/oulipo/project:LATEST
        docker push $ECR_REGISTRY/meggot/oulipo/project:LATEST

        docker tag meggot/oulipo/user:2.0-SNAPSHOT $ECR_REGISTRY/meggot/oulipo/user:LATEST
        docker push $ECR_REGISTRY/meggot/oulipo/user:LATEST
    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}
  terraform:
    needs: build-backend
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@master
      - name: 'Terraform Format'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.24
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: './terraform'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.24
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: './terraform'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.24
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: './terraform'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Terraform Plan'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.24
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: './terraform'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: 'Terraform Apply'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.24
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: './terraform'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}